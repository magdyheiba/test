import { createMap, type Mapper } from '@automapper/core'
import { type APIRequestContext, request } from 'playwright'
/**
 * this method is to map the response body to the corresponding object to apply the Serialization/De-serialization operation
 * it is basically doing two things create the mapper and map the response to the corresponding object then return this object
 * @param Mapper the mapper you want to map the JSON to its objects
 * @param responseBody
 * @param identifier of the mapped objects
 * @param root the type of the Root response body and you can initialize it like this ```const interfaceType: Root | undefined = undefined
```
 * @returns the mapped object
 */
export async function performMapping(
  Mapper: Mapper,
  responseBody: any,
  identifier: string,
  root: any
) {
  createMap<typeof root>(Mapper, identifier)
  return Mapper.map<typeof root>(responseBody, identifier)
}
/**
 * this method is a simple method to send post request using playwright
 * @param request API request parameter
 * @param url the end point you want to hit
 * @param data the json body you want to send
 * @param sessionId the session to be sent as headers
 * @returns the JSON response body
 */
export async function sendPostRequest(
  request: APIRequestContext,
  url: string,
  data: any,
  sessionId: string
) {
  return request.post(url, {
    data,
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`
    }
  })
}

/**
 * The function sends an authenticated POST request with the provided data, session ID, and access
 * token.
 * @param {APIRequestContext} request - The `request` parameter is an instance of the
 * `APIRequestContext` class, which is used to make HTTP requests.
 * @param {string} url - The URL of the API endpoint you want to send the POST request to.
 * @param {any} data - The `data` parameter is the payload or body of the HTTP POST request. It can be
 * any data that you want to send to the server.
 * @param {string} sessionId - The sessionId parameter is a unique identifier for a user's session. It
 * is typically generated by the server and stored in a cookie on the client side. It is used to
 * maintain the state of the user's session and can be used for authentication and authorization
 * purposes.
 * @param {string} accessToken - The `accessToken` parameter is a string that represents the access
 * token used for authentication. It is typically obtained after a successful login or authentication
 * process. The access token is used to authorize the user and grant them access to protected resources
 * or perform certain actions on behalf of the user.
 * @returns a promise.
 */
export async function sendAuthanticatedPostRequest(
  request: APIRequestContext,
  url: string,
  data: any,
  sessionId: string,
  accessToken: string
) {
  return request.post(url, {
    data,
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`,
      Authorization: accessToken
    }
  })
}

/**
 * The function sends a POST request using a new context in TypeScript.
 * @param {any} baseURL - The base URL is the starting point for all the API requests. It specifies the
 * domain and the root path of the API.
 * @param {any} Path - The `Path` parameter represents the endpoint or path of the API that you want to
 * send a POST request to. It should be a string value.
 * @param {any} data - The `data` parameter is the payload or data that you want to send in the POST
 * request. It can be any valid JSON object or data that you want to send to the server.
 */
export async function sendPostRequestUsingNewContext(
  baseURL: any,
  Path: any,
  data: any
) {
  const context = await request.newContext({
    baseURL: baseURL
  })
  const response = await context.post(Path, {
    headers: {
      'x-ditto-internal-token': '58%ZxLXfM4rVdGXsiD6#C!Y^g'
    },
    data: data
  })
  console.log(`Response  : --> ${JSON.stringify(response)}`)
}

/**
 * The function sends an authenticated GET request with the provided session ID and access token.
 * @param {APIRequestContext} request - The `request` parameter is an instance of the
 * `APIRequestContext` class, which is used to make HTTP requests.
 * @param {string} url - The `url` parameter is the URL of the API endpoint that you want to send the
 * GET request to.
 * @param {string} sessionId - The sessionId parameter is a unique identifier for a user's session. It
 * is typically generated by the server and stored in a cookie on the client side. The sessionId is
 * used to maintain the state of the user's session on the server and can be used to authenticate the
 * user for subsequent requests.
 * @param {string} accessToken - The `accessToken` parameter is a string that represents the access
 * token used for authentication. It is typically obtained after a user successfully logs in or
 * authorizes the application to access their resources. The access token is used to authenticate the
 * user and grant access to protected resources on the server.
 * @returns a Promise that resolves to the result of the GET request made using the provided
 * APIRequestContext.
 */
export async function sendAuthanticatedGetRequest(
  request: APIRequestContext,
  url: string,
  sessionId: string,
  accessToken: string
) {
  return request.get(url, {
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`,
      Authorization: `Bearer ${accessToken}`
    }
  })
}
/**
 * The function sends a GET request to a specified URL with a session ID as a cookie.
 * @param {APIRequestContext} request - The `request` parameter is an instance of the
 * `APIRequestContext` class, which is used to make HTTP requests.
 * @param {string} url - The `url` parameter is a string that represents the URL of the API endpoint
 * that you want to send a GET request to.
 * @param {string} sessionId - The `sessionId` parameter is a unique identifier that is used to track a
 * user's session on a website. It is typically generated by the server and stored in a cookie on the
 * client's browser. In this code snippet, the `sessionId` is used to set the `ASP.NET_SessionId`
 * @returns a Promise.
 */
export async function sendGetRequest(
  request: APIRequestContext,
  url: string,
  sessionId: string
) {
  return request.get(url, {
    headers: { Cookie: `ASP.NET_SessionId=${sessionId}` }
  })
}
/**
 * this method is a simple method to send patch request using playwright
 * @param request API request parameter
 * @param url the end point you want to hit
 * @param data the json body you want to send
 * @param sessionId the session to be sent as headers
 * @returns the JSON response body
 */
export async function sendPatchRequest(
  request: APIRequestContext,
  url: string,
  data: any,
  sessionId: string
) {
  return request.patch(url, {
    data,
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`
    }
  })
}
/**
 * The function sends a delete request to a specified URL with a session ID as a cookie.
 * @param {APIRequestContext} request - The `request` parameter is an instance of the
 * `APIRequestContext` class, which is used to make HTTP requests.
 * @param {string} url - The `url` parameter is a string that represents the URL of the API endpoint
 * that you want to send a DELETE request to.
 * @param {string} sessionId - The `sessionId` parameter is a unique identifier for a user's session.
 * It is typically used to maintain state and track user activity across multiple requests. In this
 * case, it is being used to set the `ASP.NET_SessionId` cookie in the request headers.
 * @returns a promise that resolves to the result of the delete request.
 */
export async function sendDeleteRequest(
  request: APIRequestContext,
  url: string,
  sessionId: string
) {
  return request.delete(url, {
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`
    }
  })
}
/**
 * The function sends an authenticated DELETE request with the specified URL, session ID, and access
 * token.
 * @param {APIRequestContext} request - The `request` parameter is an instance of the
 * `APIRequestContext` class, which is used to make HTTP requests.
 * @param {string} url - The `url` parameter is the endpoint URL where the delete request will be sent
 * to. It should be a string representing the URL of the resource you want to delete.
 * @param {string} sessionId - The sessionId parameter is a unique identifier that is used to track a
 * user's session on a website. It is typically generated by the server and stored in a cookie on the
 * client's browser. The sessionId is used to maintain state and keep track of the user's interactions
 * with the website.
 * @param {string} accessToken - The `accessToken` parameter is a string that represents the access
 * token used for authentication. It is typically obtained after a successful login or authentication
 * process. The access token is used to authorize the user and grant them access to protected resources
 * or perform certain actions on the server.
 * @returns a promise that resolves to the result of the delete request.
 */
export async function sendAuthanticatedDeleteRequest(
  request: APIRequestContext,
  url: string,
  sessionId: string,
  accessToken: string
) {
  return request.delete(url, {
    headers: {
      Cookie: `ASP.NET_SessionId=${sessionId}`,
      Authorization: `Bearer ${accessToken}`
    }
  })
}
/**
 * The function removes dynamic keys from an object.
 * @param {any} obj - The `obj` parameter is an object that you want to remove keys from.
 * @param {any} keysToRemove - An array of keys that need to be removed from the object.
 * @returns the modified object after removing the specified keys.
 * 
 * Example :-
 *  // Specify the keys to ignore in an array.
      const dynamicKeys = ['dynamicKey1', 'dynamicKey2'];
      // Remove the dynamic keys from both actual and expected response bodies.
      const actualFilteredResponse = removeDynamicKeys({ ...responseBody }, dynamicKeys);
      const expectedFilteredResponse = removeDynamicKeys({ ...expectedResponseBodyObject }, dynamicKeys);
      // Perform the validation on the filtered objects.
      expect(actualFilteredResponse).toEqual(expectedFilteredResponse);
 */
const removeDynamicKeys = (obj: any, keysToRemove: any) => {
  for (let key of keysToRemove) {
    delete obj[key]
  }
  return obj
}
/**
 * The function removes dynamic keys from a JSON response body.
 * @param {any} keys - The `keys` parameter is an array that contains the keys that need to be removed
 * from the JSON object.
 * @param {any} responseBody - The `responseBody` parameter is the JSON object that represents the
 * response body of an API request. It contains key-value pairs that represent the data returned by the
 * API.
 * @returns the filtered response body after removing the dynamic keys.
 */
export function removeKeysFromJSON(keys: any, responseBody: any) {
  const dynamicKeys = keys

  // Remove the dynamic keys from both actual and expected response bodies.
  const actualFilteredResponse = removeDynamicKeys(
    { ...responseBody },
    dynamicKeys
  )
  return actualFilteredResponse
}

/**
 * The function generates a random email address with a timestamp and a random string.
 * @returns a randomly generated email address in the format
 * "email-{currentTimestamp}-{randomString}@example.com".
 */
export function generateRandomEmail() {
  const currentDate = new Date()
  const currentTimestamp = currentDate.getTime()
  const randomString = Math.random().toString(36).substring(2, 7)
  return `email-${currentTimestamp}-${randomString}@example.com`
}
